input AddSiteFontInput {
  fontId: ID!
  siteId: ID!
}

input AdminEnqueuePostCompactInput {
  postId: String!
}

input AdminGiveCreditInput {
  amount: Int!
  userId: String!
}

input AdminImpersonateInput {
  userId: String!
}

type AdminPostsResult {
  posts: [Post!]!
  totalCount: Int!
}

type AdminUsersResult {
  totalCount: Int!
  users: [User!]!
}

input AuthorizeSignUpEmailInput {
  code: String!
}

input AuthorizeSingleSignOnInput {
  params: JSON!
  provider: SingleSignOnProvider!
  referralCode: String
}

scalar Binary

interface Blob {
  id: ID!
  size: Int!
}

type Canvas implements ICanvas {
  createdAt: DateTime!
  entity: Entity!
  id: ID!
  snapshots: [CanvasSnapshot!]!
  title: String!
  update: Binary!
  updatedAt: DateTime!
  view: CanvasView!
}

type CanvasSnapshot {
  createdAt: DateTime!
  id: ID!
  snapshot: Binary!
}

type CanvasSyncStreamPayload {
  canvasId: ID!
  data: String!
  type: CanvasSyncType!
}

enum CanvasSyncType {
  AWARENESS
  HEARTBEAT
  PRESENCE
  UPDATE
  VECTOR
}

type CanvasView implements ICanvas {
  createdAt: DateTime!
  entity: EntityView!
  id: ID!
  shapes: JSON!
  title: String!
  updatedAt: DateTime!
}

type CharacterCountChange {
  additions: Int!
  date: DateTime!
  deletions: Int!
}

input CheckSpellingInput {
  body: JSON!
}

type Comment {
  content: String
  createdAt: DateTime!
  id: ID!
  state: CommentState!
}

enum CommentState {
  ACTIVE
  DELETED
}

input CreateCanvasInput {
  parentEntityId: ID
  siteId: ID!
}

input CreateCommentInput {
  content: String!
  postId: ID!
}

input CreateFolderInput {
  name: String!
  parentEntityId: ID
  siteId: ID!
}

input CreatePostInput {
  parentEntityId: ID
  siteId: ID!
}

input CreatePostReactionInput {
  emoji: String!
  postId: ID!
}

type CreditCode {
  amount: Int!
  code: String!
  id: ID!
}

enum CreditCodeState {
  AVAILABLE
  USED
}

scalar DateTime

input DeleteCanvasInput {
  canvasId: ID!
}

input DeleteCommentInput {
  commentId: ID!
}

input DeleteEntitiesInput {
  entityIds: [ID!]!
}

input DeleteFolderInput {
  folderId: ID!
}

input DeletePostInput {
  postId: ID!
}

input DuplicateCanvasInput {
  canvasId: ID!
}

input DuplicatePostInput {
  postId: ID!
}

type Embed {
  description: String
  html: String
  id: ID!
  thumbnailUrl: String
  title: String
  url: String!
}

type Entity implements IEntity {
  ancestors: [Entity!]!
  availability: EntityAvailability!
  children: [Entity!]!
  deletedChildren: [Entity!]!
  depth: Int!
  descendants: [Entity!]!
  id: ID!
  node: EntityNode!
  order: String!
  parent: Entity
  permalink: String!
  site: Site!
  slug: String!
  state: EntityState!
  type: EntityType!
  url: String!
  user: User!
  view: EntityView!
  visibility: EntityVisibility!
}

enum EntityAvailability {
  PRIVATE
  UNLISTED
}

union EntityNode = Canvas | Folder | Post

enum EntityState {
  ACTIVE
  DELETED
  PURGED
}

enum EntityType {
  CANVAS
  FOLDER
  POST
}

type EntityView implements IEntity {
  ancestors: [EntityView!]!
  availability: EntityAvailability!
  children: [EntityView!]!
  depth: Int!
  id: ID!
  node: EntityViewNode!
  order: String!
  permalink: String!
  site: SiteView!
  slug: String!
  state: EntityState!
  type: EntityType!
  url: String!
  visibility: EntityVisibility!
}

union EntityViewNode = CanvasView | FolderView | PostView

enum EntityVisibility {
  PRIVATE
  UNLISTED
}

enum ExportLayoutMode {
  PAGE
  SCROLL
}

input ExportPostAsPdfInput {
  entityId: ID!
  height: Float!
  layoutMode: ExportLayoutMode!
  marginBottom: Float!
  marginLeft: Float!
  marginRight: Float!
  marginTop: Float!
  width: Float!
}

type ExportPostAsPdfResult {
  data: String!
  filename: String!
}

type File implements Blob {
  id: ID!
  name: String!
  size: Int!
  url: String!
}

type Folder implements IFolder {
  canvasCount: Int!
  characterCount: Int!
  entity: Entity!
  folderCount: Int!
  id: ID!
  maxDescendantFoldersDepth: Int!
  name: String!
  postCount: Int!
  view: FolderView!
}

type FolderView implements IFolder {
  entity: EntityView!
  folderCount: Int!
  id: ID!
  name: String!
  postCount: Int!
}

type Font implements Blob {
  fullName: String
  id: ID!
  name: String!
  size: Int!
  url: String!
  weight: Int!
}

enum FontState {
  ACTIVE
  ARCHIVED
}

input GenerateSingleSignOnAuthorizationUrlInput {
  email: String
  provider: SingleSignOnProvider!
  state: String!
}

interface ICanvas {
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

interface IEntity {
  availability: EntityAvailability!
  depth: Int!
  id: ID!
  order: String!
  permalink: String!
  slug: String!
  state: EntityState!
  type: EntityType!
  url: String!
  visibility: EntityVisibility!
}

interface IFolder {
  id: ID!
  name: String!
}

interface IPost {
  allowComment: Boolean!
  allowReaction: Boolean!
  availableActions: [PostAvailableAction!]!
  contentRating: PostContentRating!
  coverImage: Image
  createdAt: DateTime!
  excerpt: String!
  id: ID!
  maxWidth: Int!
  protectContent: Boolean!
  subtitle: String
  title: String!
  type: PostType!
  updatedAt: DateTime!
}

interface ISite {
  fonts: [Font!]!
  id: ID!
  name: String!
  slug: String!
  url: String!
}

type Image implements Blob {
  id: ID!
  placeholder: String!
  ratio: Float!
  size: Int!
  url: String!
}

type Impersonation {
  admin: User!
  user: User!
}

enum InAppPurchaseStore {
  APP_STORE
  GOOGLE_PLAY
}

input IssueBlobUploadUrlInput {
  filename: String!
}

type IssueBlobUploadUrlResult {
  fields: JSON!
  path: String!
  url: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginWithEmailInput {
  email: String!
  password: String!
}

input MarkNotificationAsReadInput {
  notificationId: ID!
}

input MoveEntitiesInput {
  entityIds: [ID!]!
  lowerOrder: String
  parentEntityId: ID
  upperOrder: String
}

input MoveEntityInput {
  entityId: ID!
  lowerOrder: String
  parentEntityId: ID
  treatEmptyParentIdAsRoot: Boolean = false
  upperOrder: String
}

type Mutation {
  addSiteFont(input: AddSiteFontInput!): Site!
  adminEnqueuePostCompact(input: AdminEnqueuePostCompactInput!): Boolean!
  adminGiveCredit(input: AdminGiveCreditInput!): Boolean!
  adminImpersonate(input: AdminImpersonateInput!): Boolean!
  adminStopImpersonation: Boolean!
  authorizeSignUpEmail(input: AuthorizeSignUpEmailInput!): String!
  authorizeSingleSignOn(input: AuthorizeSingleSignOnInput!): String!
  cancelPlanChange: Subscription_!
  cancelSubscriptionCancellation: Subscription_!
  checkSpelling(input: CheckSpellingInput!): [SpellingError!]!
  createCanvas(input: CreateCanvasInput!): Canvas!
  createComment(input: CreateCommentInput!): Comment!
  createFolder(input: CreateFolderInput!): Folder!
  createPost(input: CreatePostInput!): Post!
  createPostReaction(input: CreatePostReactionInput!): PostReaction!
  createWsSession: String!
  deleteCanvas(input: DeleteCanvasInput!): Canvas!
  deleteComment(input: DeleteCommentInput!): Comment!
  deleteEntities(input: DeleteEntitiesInput!): [Entity!]!
  deleteFolder(input: DeleteFolderInput!): Folder!
  deletePost(input: DeletePostInput!): Post!
  deleteUser: Boolean!
  duplicateCanvas(input: DuplicateCanvasInput!): Canvas!
  duplicatePost(input: DuplicatePostInput!): Post!
  exportPostAsPdf(input: ExportPostAsPdfInput!): ExportPostAsPdfResult!
  generateActivityImage: Binary!
  generateRandomName: String!
  generateSingleSignOnAuthorizationUrl(input: GenerateSingleSignOnAuthorizationUrlInput!): String!
  issueBlobUploadUrl(input: IssueBlobUploadUrlInput!): IssueBlobUploadUrlResult!
  issueReferralUrl: String!
  loginWithEmail(input: LoginWithEmailInput!): Boolean!
  markAllNotificationsAsRead: [Notification!]!
  markNotificationAsRead(input: MarkNotificationAsReadInput!): Notification!
  moveEntities(input: MoveEntitiesInput!): [Entity!]!
  moveEntity(input: MoveEntityInput!): Entity!
  persistBlobAsFile(input: PersistBlobAsFileInput!): File!
  persistBlobAsFont(input: PersistBlobAsFontInput!): Font!
  persistBlobAsImage(input: PersistBlobAsImageInput!): Image!
  purgeEntities(input: PurgeEntitiesInput!): Site!
  recoverEntity(input: RecoverEntityInput!): Entity!
  redeemCreditCode(input: RedeemCreditCodeInput!): User!
  registerPushNotificationToken(input: RegisterPushNotificationTokenInput!): Boolean!
  removeSiteFont(input: RemoveSiteFontInput!): Site!
  renameFolder(input: RenameFolderInput!): Folder!
  reportPost(input: ReportPostInput!): Boolean!
  resetPassword(input: ResetPasswordInput!): Boolean!
  schedulePlanChange(input: SchedulePlanChangeInput!): Subscription_!
  scheduleSubscriptionCancellation: Subscription_!
  sendEmailUpdateEmail(input: SendEmailUpdateEmailInput!): Boolean!
  sendPasswordResetEmail(input: SendPasswordResetEmailInput!): Boolean!
  sendSignUpEmail(input: SendSignUpEmailInput!): Boolean!
  subscribeOrChangePlanWithInAppPurchase(input: SubscribeOrChangePlanWithInAppPurchaseInput!): Subscription_!
  subscribePlanWithBillingKey(input: SubscribePlanWithBillingKeyInput!): Subscription_!
  syncCanvas(input: SyncCanvasInput!): Boolean!
  syncPost(input: SyncPostInput!): Boolean!
  unfurlEmbed(input: UnfurlEmbedInput!): Embed!
  unlockPostView(input: UnlockPostViewInput!): PostView!
  updateBillingKey(input: UpdateBillingKeyInput!): UserBillingKey!
  updateEmail(input: UpdateEmailInput!): Boolean!
  updateFolderOption(input: UpdateFolderOptionInput!): Folder!
  updateFoldersOption(input: UpdateFoldersOptionInput!): [Folder!]!
  updateMarketingConsent(input: UpdateMarketingConsentInput!): User!
  updatePassword(input: UpdatePasswordInput!): User!
  updatePostOption(input: UpdatePostOptionInput!): Post!
  updatePostType(input: UpdatePostTypeInput!): Post!
  updatePostsOption(input: UpdatePostsOptionInput!): [Post!]!
  updatePreferences(input: UpdatePreferencesInput!): User!
  updateSiteSlug(input: UpdateSiteSlugInput!): Site!
  updateUser(input: UpdateUserInput!): User!
  verifyPersonalIdentity(input: VerifyPersonalIdentityInput!): User!
  viewEntity(input: ViewEntityInput!): Entity!
}

type Notification {
  data: NotificationData!
  id: ID!
  state: NotificationState!
}

type NotificationAnnouncementData {
  link: String
  message: String!
}

enum NotificationCategory {
  ANNOUNCEMENT
  COMMENT
}

type NotificationCommentData {
  comment: Comment!
  post: Post!
}

union NotificationData = NotificationAnnouncementData | NotificationCommentData

enum NotificationState {
  READ
  UNREAD
}

type PaymentInvoice {
  dueAt: DateTime!
  id: ID!
  state: PaymentInvoiceState!
}

enum PaymentInvoiceState {
  CANCELED
  OVERDUE
  PAID
  UPCOMING
}

enum PaymentOutcome {
  FAILURE
  SUCCESS
}

type Permalink {
  entitySlug: String!
  siteUrl: String!
}

input PersistBlobAsFileInput {
  path: String!
}

input PersistBlobAsFontInput {
  path: String!
}

input PersistBlobAsImageInput {
  modification: JSON
  path: String!
}

type Plan {
  availability: PlanAvailability!
  fee: Int!
  id: ID!
  interval: PlanInterval!
  name: String!
  rule: PlanRule!
}

enum PlanAvailability {
  BILLING_KEY
  IN_APP_PURCHASE
  MANUAL
}

enum PlanInterval {
  LIFETIME
  MONTHLY
  YEARLY
}

type PlanRule {
  maxTotalBlobSize: Int!
  maxTotalCharacterCount: Int!
}

type Post implements IPost {
  allowComment: Boolean!
  allowReaction: Boolean!
  availableActions: [PostAvailableAction!]!
  body: JSON!
  characterCount: Int!
  characterCountChange: CharacterCountChange!
  contentRating: PostContentRating!
  coverImage: Image
  createdAt: DateTime!
  entity: Entity!
  excerpt: String!
  id: ID!
  maxWidth: Int!
  password: String
  protectContent: Boolean!
  reactionCount: Int!
  snapshots: [PostSnapshot!]!
  storedMarks: JSON!
  subtitle: String
  title: String!
  type: PostType!
  update: Binary!
  updatedAt: DateTime!
  view: PostView!
}

enum PostAvailableAction {
  EDIT
}

enum PostContentRating {
  ALL
  R15
  R19
}

type PostReaction {
  emoji: String!
  id: ID!
  post: PostView!
}

type PostSnapshot {
  createdAt: DateTime!
  id: ID!
  snapshot: Binary!
}

type PostSyncStreamPayload {
  data: String!
  postId: ID!
  type: PostSyncType!
}

enum PostSyncType {
  AWARENESS
  HEARTBEAT
  PRESENCE
  UPDATE
  VECTOR
}

enum PostType {
  NORMAL
  TEMPLATE
}

type PostView implements IPost {
  allowComment: Boolean!
  allowReaction: Boolean!
  availableActions: [PostAvailableAction!]!
  body: PostViewBody!
  comments: [Comment!]!
  contentRating: PostContentRating!
  coverImage: Image
  createdAt: DateTime!
  entity: EntityView!
  excerpt: String!
  hasPassword: Boolean!
  id: ID!
  maxWidth: Int!
  protectContent: Boolean!
  reactions: [PostReaction!]!
  subtitle: String
  title: String!
  type: PostType!
  updatedAt: DateTime!
}

union PostViewBody = PostViewBodyAvailable | PostViewBodyUnavailable

type PostViewBodyAvailable {
  content: JSON!
}

type PostViewBodyUnavailable {
  reason: PostViewBodyUnavailableReason!
}

enum PostViewBodyUnavailableReason {
  REQUIRE_IDENTITY_VERIFICATION
  REQUIRE_MINIMUM_AGE
  REQUIRE_PASSWORD
}

enum PreorderPaymentState {
  COMPLETED
  FAILED
  PENDING
}

input PurgeEntitiesInput {
  entityIds: [ID!]!
}

type Query {
  adminPost(postId: String!): Post!
  adminPosts(limit: Int! = 20, offset: Int! = 0, search: String, state: EntityState, type: PostType): AdminPostsResult!
  adminUser(userId: String!): User!
  adminUsers(limit: Int! = 20, offset: Int! = 0, role: UserRole, search: String, state: UserState): AdminUsersResult!
  announcements: [PostView!]!
  canvas(slug: String!): Canvas!
  creditCode(code: String!): CreditCode!
  defaultPlanRule: PlanRule!
  entities(entityIds: [ID!]!): [Entity!]!
  entity(entityId: ID, slug: String): Entity!
  entityView(origin: String!, slug: String!): EntityView!
  folder(id: ID!): Folder!
  image(imageId: ID!): Image!
  impersonation: Impersonation
  me: User
  permalink(permalink: String!): Permalink!
  post(slug: String!): Post!
  randomName: String!
  search(query: String!, siteId: ID!): SearchResult!
  seed: Float!
  site(siteId: ID!): Site!
  stats: JSON!
  welcome: Welcome!
}

input RecoverEntityInput {
  entityId: ID!
}

input RedeemCreditCodeInput {
  code: String!
}

type Referral {
  compensated: Boolean!
  id: ID!
}

input RegisterPushNotificationTokenInput {
  token: String!
}

input RemoveSiteFontInput {
  fontId: ID!
  siteId: ID!
}

input RenameFolderInput {
  folderId: ID!
  name: String!
}

input ReportPostInput {
  postId: ID!
  reason: String
}

input ResetPasswordInput {
  code: String!
  password: String!
}

input SchedulePlanChangeInput {
  planId: ID!
}

union SearchHit = SearchHitCanvas | SearchHitPost

type SearchHitCanvas {
  canvas: Canvas!
  title: String
  type: SearchHitType!
}

type SearchHitPost {
  post: Post!
  subtitle: String
  text: String
  title: String
  type: SearchHitType!
}

enum SearchHitType {
  CANVAS
  POST
}

type SearchResult {
  hits: [SearchHit!]!
  totalHits: Int!
}

input SendEmailUpdateEmailInput {
  email: String!
}

input SendPasswordResetEmailInput {
  email: String!
}

input SendSignUpEmailInput {
  email: String!
  marketingAgreed: Boolean!
  name: String!
  password: String!
  referralCode: String
  state: String!
}

enum SingleSignOnProvider {
  APPLE
  GOOGLE
  KAKAO
  NAVER
}

type Site implements ISite {
  deletedEntities: [Entity!]!
  entities: [Entity!]!
  firstEntity(type: EntityType!): Entity
  fonts: [Font!]!
  id: ID!
  name: String!
  slug: String!
  templates: [Post!]!
  url: String!
  usage: SiteUsage! @deprecated(reason: "Use User.usage instead")
  user: User!
  view: SiteView!
}

enum SiteState {
  ACTIVE
  DELETED
}

union SiteUpdateStreamPayload = Entity | Site

type SiteUsage {
  totalBlobSize: Int!
  totalCharacterCount: Int!
}

type SiteView implements ISite {
  fonts: [Font!]!
  id: ID!
  myMasqueradeName: String!
  name: String!
  slug: String!
  url: String!
}

type SpellingError {
  context: String!
  corrections: [String!]!
  explanation: String!
  from: Int!
  to: Int!
}

input SubscribeOrChangePlanWithInAppPurchaseInput {
  data: String!
  store: InAppPurchaseStore!
}

input SubscribePlanWithBillingKeyInput {
  planId: ID!
}

type Subscription {
  canvasSyncStream(canvasId: ID!, clientId: String!): CanvasSyncStreamPayload!
  postSyncStream(clientId: String!, postId: ID!): PostSyncStreamPayload!
  siteUpdateStream(siteId: ID!): SiteUpdateStreamPayload!
  siteUsageUpdateStream(siteId: ID!): Site!
}

enum SubscriptionState {
  ACTIVE
  EXPIRED
  IN_GRACE_PERIOD
  WILL_ACTIVATE
  WILL_EXPIRE
}

type Subscription_ {
  expiresAt: DateTime!
  id: ID!
  plan: Plan!
  startsAt: DateTime!
  state: SubscriptionState!
  user: User!
}

input SyncCanvasInput {
  canvasId: ID!
  clientId: String!
  data: String!
  type: CanvasSyncType!
}

input SyncPostInput {
  clientId: String!
  data: String!
  postId: ID!
  type: PostSyncType!
}

input UnfurlEmbedInput {
  url: String!
}

input UnlockPostViewInput {
  password: String!
  postId: ID!
}

input UpdateBillingKeyInput {
  birthOrBusinessRegistrationNumber: String!
  cardNumber: String!
  expiryDate: String!
  passwordTwoDigits: String!
}

input UpdateEmailInput {
  code: String!
}

input UpdateFolderOptionInput {
  folderId: ID!
  recursive: Boolean = false
  visibility: EntityVisibility!
}

input UpdateFoldersOptionInput {
  folderIds: [ID!]!
  recursive: Boolean = false
  visibility: EntityVisibility
}

input UpdateMarketingConsentInput {
  marketingConsent: Boolean!
}

input UpdatePasswordInput {
  currentPassword: String
  newPassword: String!
}

input UpdatePostOptionInput {
  allowComment: Boolean
  allowReaction: Boolean!
  availability: EntityAvailability
  contentRating: PostContentRating!
  password: String
  postId: ID!
  protectContent: Boolean!
  visibility: EntityVisibility!
}

input UpdatePostTypeInput {
  postId: ID!
  type: PostType!
}

input UpdatePostsOptionInput {
  allowReaction: Boolean
  availability: EntityAvailability
  contentRating: PostContentRating
  password: String
  postIds: [ID!]!
  protectContent: Boolean
  visibility: EntityVisibility
}

input UpdatePreferencesInput {
  value: JSON!
}

input UpdateSiteSlugInput {
  siteId: ID!
  slug: String!
}

input UpdateUserInput {
  avatarId: ID!
  name: String!
}

type User {
  avatar: Image!
  billingKey: UserBillingKey
  characterCountChanges: [CharacterCountChange!]!
  createdAt: DateTime!
  credit: Int!
  email: String!
  hasPassword: Boolean!
  id: ID!
  marketingConsent: Boolean!
  name: String!
  notifications: [Notification!]!
  personalIdentity: UserPersonalIdentity
  postCount: Int!
  preferences: JSON!
  recentPosts: [Post!]!
  recentlyViewedEntities: [Entity!]!
  referral: Referral
  referrals: [Referral!]!
  role: UserRole!
  singleSignOns: [UserSingleSignOn!]!
  sites: [Site!]!
  state: UserState!
  subscription: Subscription_
  totalCharacterCount: Int!
  usage: UserUsage!
  uuid: String!
}

type UserBillingKey {
  createdAt: DateTime!
  id: ID!
  name: String!
}

type UserPersonalIdentity {
  birthDate: DateTime!
  expiresAt: DateTime!
  gender: String!
  id: ID!
  name: String!
  phoneNumber: String
}

enum UserRole {
  ADMIN
  USER
}

type UserSingleSignOn {
  email: String!
  id: ID!
  provider: SingleSignOnProvider!
}

enum UserState {
  ACTIVE
  DEACTIVATED
}

type UserUsage {
  totalBlobSize: Int!
  totalCharacterCount: Int!
}

input VerifyPersonalIdentityInput {
  identityVerificationId: String!
}

input ViewEntityInput {
  entityId: ID!
}

type Welcome {
  body: JSON!
  bodyMobile: JSON!
  name: String!
  update: Binary!
  updateMobile: Binary!
}
